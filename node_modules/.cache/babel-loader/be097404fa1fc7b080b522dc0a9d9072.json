{"ast":null,"code":"var _jsxFileName = \"/Users/yana/timer-quiz/src/Test.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Test = () => {\n  _s();\n\n  const [data, setData] = useState(null),\n        [index, setIndex] = useState(0);\n  let buttons = [],\n      question = \"\",\n      page;\n\n  function cleanAnswers() {\n    var answer,\n        j = 0;\n\n    for (j = 0; j < 4; j++) {\n      answer = document.getElementById(\"answer\" + j);\n\n      if (answer && answer.classList.contains(\"red\")) {\n        answer.removeClass(\"red\");\n      }\n\n      if (answer && answer.classList.contains(\"green\")) {\n        answer.removeClass(\"green\");\n      }\n    }\n  }\n\n  const checkAnswer = (e, data) => {\n    if (e.target.innerText == data[index].correctAnswer) {\n      e.target.classList.toggle(\"green\");\n      setIndex(index + 1);\n    } else {\n      e.target.classList.toggle(\"red\");\n    }\n  };\n\n  const getAnswers = data => {\n    let answers = [];\n    answers.push(data[index].correctAnswer);\n\n    for (let j = 0; j < 3; j++) {\n      answers.push(data[index].incorrectAnswers[j]);\n    }\n\n    answers.sort();\n    return answers;\n  };\n\n  const getButtons = data => {\n    let buttons = [],\n        answers = getAnswers(data);\n\n    for (let i = 0; i < answers.length; i++) {\n      buttons.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"answer\",\n        id: \"answer\" + i,\n        onClick: e => checkAnswer(e, data),\n        children: answers[i]\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 30\n      }, this));\n    }\n\n    return buttons;\n  };\n\n  const getQuestion = data => {\n    return data[index].question;\n  };\n\n  useEffect(() => {\n    fetch('https://api.trivia.willfry.co.uk/questions?categories=geography&limit=10').then(res => {\n      return res.json();\n    }).then(data => {\n      setData(data);\n    });\n  }, []);\n\n  if (data && index < 10) {\n    buttons = getButtons(data);\n    question = getQuestion(data);\n  }\n\n  if (index >= 10) {\n    page = /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Congratulations! You did it!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 16\n    }, this);\n  } else {\n    cleanAnswers();\n    page = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tests\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"textColor\",\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), buttons]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this);\n  }\n\n  return page;\n};\n\n_s(Test, \"UScYdpvJJmoxDoWxtgVK1w7saEA=\");\n\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/yana/timer-quiz/src/Test.js"],"names":["React","useEffect","useState","Test","data","setData","index","setIndex","buttons","question","page","cleanAnswers","answer","j","document","getElementById","classList","contains","removeClass","checkAnswer","e","target","innerText","correctAnswer","toggle","getAnswers","answers","push","incorrectAnswers","sort","getButtons","i","length","getQuestion","fetch","then","res","json"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\n\n\nexport const Test = () => {\n    const [data, setData] = useState(null),\n          [index, setIndex] = useState(0);\n\n    let buttons = [], question = \"\", page;\n\n    function cleanAnswers() {\n        var answer, j = 0;\n    \n        for (j=0; j<4; j++) {\n            answer = document.getElementById(\"answer\" + j)\n            if (answer && answer.classList.contains(\"red\")) {\n                answer.removeClass(\"red\");  \n            }\n            if (answer && answer.classList.contains(\"green\")) {\n                answer.removeClass(\"green\");  \n            }\n        }\n    }\n        \n    const checkAnswer = (e, data) => {\n        if (e.target.innerText ==  data[index].correctAnswer) {\n            e.target.classList.toggle(\"green\");\n            setIndex(index + 1);\n        } else {\n            e.target.classList.toggle(\"red\");\n        }\n    }\n        \n        const getAnswers = (data) => {\n            let answers = [];\n        \n            answers.push(data[index].correctAnswer);\n            for (let j=0; j<3; j++) {\n                answers.push(data[index].incorrectAnswers[j]);\n            }\n            answers.sort();\n        \n            return answers;\n        }\n        \n        const getButtons = (data) => {\n            let buttons = [],\n                answers = getAnswers(data);\n        \n            for (let i=0; i<answers.length; i++) {\n                buttons.push(<button className=\"answer\" id={\"answer\" + i} key={i} onClick={(e) => checkAnswer(e, data)}>{answers[i]}</button>);\n            }\n            \n            return buttons;\n        }\n        \n        const getQuestion = (data) => {\n            return data[index].question;\n        }\n        \n\n    useEffect(()=>{\n        fetch('https://api.trivia.willfry.co.uk/questions?categories=geography&limit=10')\n             .then(res => {\n                 return res.json();\n             })\n             .then(data => {\n                 setData(data);\n             })\n    }, []);\n\n    if (data && index < 10) {\n        buttons = getButtons(data);\n        question = getQuestion(data);\n    }\n\n    if (index >= 10) {\n        page = <h1>Congratulations! You did it!</h1>;\n    } else {\n        cleanAnswers();\n        page = (<div className=\"tests\">\n            <h1 className=\"textColor\">{question}</h1>\n            {buttons}\n        </div>\n    );\n    }\n\n    return page;\n}"]},"metadata":{},"sourceType":"module"}