{"ast":null,"code":"var _jsxFileName = \"/Users/yana/timer-quiz/src/Test.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"./Button.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet index = 0,\n    correct = \"\",\n    buttons = [],\n    question = \"\";\n\nconst getAnswers = data => {\n  let answers = [],\n      correct = data[index].correctAnswer;\n  answers.push(correct);\n\n  for (let j = 0; j < 3; j++) {\n    answers.push(data[0].incorrectAnswers[j]);\n  }\n\n  answers.sort();\n  return answers;\n};\n\nconst getButtons = data => {\n  let buttons = [],\n      answers = getAnswers(data);\n\n  for (let i = 0; i < answers.length; i++) {\n    buttons.push( /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"test\",\n      onClick: e => checkAnswer(e.target.value, data),\n      children: answers[i]\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 22\n    }, this));\n  }\n\n  return buttons;\n};\n\nconst getQuestion = data => {\n  return data[index].question;\n};\n\nexport const Test = () => {\n  _s();\n\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    fetch('https://api.trivia.willfry.co.uk/questions?categories=geography&limit=10').then(res => {\n      return res.json();\n    }).then(data => {\n      setData(data);\n    });\n  }, [buttons]);\n\n  if (data) {\n    buttons = getButtons(data);\n    question = getQuestion(data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this), buttons]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Test, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/yana/timer-quiz/src/Test.js"],"names":["React","useEffect","useState","Button","index","correct","buttons","question","getAnswers","data","answers","correctAnswer","push","j","incorrectAnswers","sort","getButtons","i","length","e","checkAnswer","target","value","getQuestion","Test","setData","fetch","then","res","json"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,aAAvB;;AAEA,IAAIC,KAAK,GAAG,CAAZ;AAAA,IACIC,OAAO,GAAG,EADd;AAAA,IAEIC,OAAO,GAAG,EAFd;AAAA,IAEkBC,QAAQ,GAAG,EAF7B;;AAIA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AACzB,MAAIC,OAAO,GAAG,EAAd;AAAA,MACIL,OAAO,GAAGI,IAAI,CAACL,KAAD,CAAJ,CAAYO,aAD1B;AAGAD,EAAAA,OAAO,CAACE,IAAR,CAAaP,OAAb;;AACA,OAAK,IAAIQ,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACpBH,IAAAA,OAAO,CAACE,IAAR,CAAaH,IAAI,CAAC,CAAD,CAAJ,CAAQK,gBAAR,CAAyBD,CAAzB,CAAb;AACH;;AACDH,EAAAA,OAAO,CAACK,IAAR;AAEA,SAAOL,OAAP;AACH,CAXD;;AAaA,MAAMM,UAAU,GAAIP,IAAD,IAAU;AACzB,MAAIH,OAAO,GAAG,EAAd;AAAA,MACII,OAAO,GAAGF,UAAU,CAACC,IAAD,CADxB;;AAGA,OAAK,IAAIQ,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACP,OAAO,CAACQ,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjCX,IAAAA,OAAO,CAACM,IAAR,eAAa;AAAQ,MAAA,SAAS,EAAC,MAAlB;AAAiC,MAAA,OAAO,EAAGO,CAAD,IAAOC,WAAW,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,EAAiBb,IAAjB,CAA5D;AAAA,gBAAqFC,OAAO,CAACO,CAAD;AAA5F,OAA8BA,CAA9B;AAAA;AAAA;AAAA;AAAA,YAAb;AACH;;AAED,SAAOX,OAAP;AACH,CATD;;AAWA,MAAMiB,WAAW,GAAId,IAAD,IAAU;AAC1B,SAAOA,IAAI,CAACL,KAAD,CAAJ,CAAYG,QAAnB;AACH,CAFD;;AAKA,OAAO,MAAMiB,IAAI,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACf,IAAD,EAAOgB,OAAP,IAAkBvB,QAAQ,CAAC,IAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACVyB,IAAAA,KAAK,CAAC,0EAAD,CAAL,CACMC,IADN,CACWC,GAAG,IAAI;AACT,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,KAHN,EAIMF,IAJN,CAIWlB,IAAI,IAAI;AACVgB,MAAAA,OAAO,CAAChB,IAAD,CAAP;AACH,KANN;AAOH,GARQ,EAQN,CAACH,OAAD,CARM,CAAT;;AAUA,MAAIG,IAAJ,EAAU;AACNH,IAAAA,OAAO,GAAGU,UAAU,CAACP,IAAD,CAApB;AACAF,IAAAA,QAAQ,GAAGgB,WAAW,CAACd,IAAD,CAAtB;AACH;;AAED,sBAAQ;AAAA,4BACI;AAAA,gBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKD,OAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAKH,CAvBM;;GAAMkB,I;;KAAAA,I","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"./Button.js\";\n\nlet index = 0, \n    correct = \"\",\n    buttons = [], question = \"\";\n\nconst getAnswers = (data) => {\n    let answers = [], \n        correct = data[index].correctAnswer;\n\n    answers.push(correct);\n    for (let j=0; j<3; j++) {\n        answers.push(data[0].incorrectAnswers[j]);\n    }\n    answers.sort();\n\n    return answers;\n}\n\nconst getButtons = (data) => {\n    let buttons = [],\n        answers = getAnswers(data);\n\n    for (let i=0; i<answers.length; i++) {\n        buttons.push(<button className=\"test\" key={i} onClick={(e) => checkAnswer(e.target.value, data)}>{answers[i]}</button>);\n    }\n    \n    return buttons;\n}\n\nconst getQuestion = (data) => {\n    return data[index].question;\n}\n\n\nexport const Test = () => {\n    const [data, setData] = useState(null);\n\n    useEffect(()=>{\n        fetch('https://api.trivia.willfry.co.uk/questions?categories=geography&limit=10')\n             .then(res => {\n                 return res.json();\n             })\n             .then(data => {\n                 setData(data);\n             })\n    }, [buttons]);\n\n    if (data) {\n        buttons = getButtons(data);\n        question = getQuestion(data);\n    }\n\n    return (<div>\n                <h1>{question}</h1>\n                {buttons}\n            </div>\n        );\n}"]},"metadata":{},"sourceType":"module"}